def load_normalized_test_case(image, pagelocked_buffer):
    # 将输入图片转换为CHW numpy数组
    def normalize_image(image):
        # 调整大小、平滑、转换图像为CHW
        c, h, w = 3, 640, 640
        im = cv2.resize(image, (h,w))
        im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
        im = im.transpose((2, 0, 1)).astype(np.float32)
        # im = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB
        # img = np.ascontiguousarray(img)

        im = torch.from_numpy(im)
        # fp16 = False
        # im = im.half() if fp16 else im.float()  # uint8 to fp16/32
        im /= 255 
        # if len(im.shape) == 3:
        #     im = im[None]
        im = im.ravel()
        # img = img.transpose((2, 0, 1)).astype(np.float32).ravel()  # .ravel将3*640*640铺平1228800
        # img /= 255.0
        return im
    
    # 规范化图像，并将图像复制到锁页内存中
    image = normalize_image(image)
    print('image:', image.shape)
    np.copyto(pagelocked_buffer, image)
    return image



class HostDeviceMem(object):
    def __init__(self, host_mem, device_mem):
        self.host = host_mem
        self.device = device_mem

    def __str__(self):
        return "Host:\n" + str(self.host) + "\nDevice:\n" + str(self.device)

    def __repr__(self):
        return self.__str__()